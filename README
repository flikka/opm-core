* This is the "cmake" branch of opm-core. Its purpose is to use CMake instead of
  Autotools as building system. It should be viewed as an experimental branch, and
  is not (yet) suitable to use as a base for further development of the C++ code.

* Please do not push changes to this branch as there are several changes locally
  in the patch queue. Instead, make a pull request on GitHub.

* If you build the library as a shared object on a 64-bit Linux platform, then
  ERT should be built using the option -DSHARED_LIB:BOOL=ON

* Documentation and tests are not built by default; if you want to build it, use
  the commands "make doc" and "make tests" respectively. Building these components
  will take significantly longer time than just the library.

* If you want to try out this branch together with the latest changes in the main
  branch, do this:

  git clone -b cmake http://github.com/OPM/opm-core opm-core-cmake
  pushd opm-core-cmake
  git checkout -b cmake-merge
  git fetch origin
  git merge --strategy=ours origin/master

* If you plan to add your own commits, then you should create them in a feature
  branch, which is branched off the merged CMake branch:

  git checkout -b feature cmake-merge

  If you now want to get updates from the CMake branch into your feature branch,
  you can do this:

  git checkout cmake-merge
  git fetch origin
  git merge origin/cmake
  git checkout features
  git rebase --preserve-merges cmake-merge

  You can do the same with the master branch, but add --strategy=ours to the
  merge command (like above), to avoid needless merge conflicts.

* Steps to build using CMake:

  cmake ../../src/opm-core -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Debug && \
  make

* In particular, you must set CMAKE_BUILD_TYPE when running CMake, to enable
  debugging within QtCreator.

* Notice that a very simple form of 'configure' also works. Use `configure --help`
  to see available options. For instance, to build the project you can do:

  ../../src/opm-core/configure --prefix=/usr/local && make

* The build is automatically parallelized in a way that is non-intrusive to
  interactive use of the workstation while still being usable on a server.
